/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package almacen.cacao;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.io.BufferedWriter;
import java.io.FileWriter;
import javax.swing.JOptionPane;
//import javax.swing.JTable;
//import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andres
 */
public class CalculadoraDeCacao extends javax.swing.JFrame {
public String Cliente;
public String tipoCacao;
public  double cantidadCacao;
public  double cantidadCacaoBruto;
public  double precioCacao;
public  double precioBruto;
public  double porCentajePrecio= 50;
public  double porcentajeQuintal= 0.38;
public  double resultadoCacao;
//private DefaultTableModel tabla;
    /**
     * Creates new form CalculadoraDeCacao
     */
    public CalculadoraDeCacao() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("Calculadora Cacao");
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();
        lblNombreCliente = new java.awt.Label();
        lblTipoCacao = new java.awt.Label();
        lblCantidadCacao = new java.awt.Label();
        lblPrecioCacao = new java.awt.Label();
        lblTotalAPagar = new java.awt.Label();
        txtNombreCliente = new javax.swing.JTextField();
        txtTipoCacao = new javax.swing.JTextField();
        txtCantidadCacao = new javax.swing.JTextField();
        txtPrecioCacao = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnCalcular = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        lblFecha = new java.awt.Label();
        txtFecha = new javax.swing.JTextField();
        lblVendedor = new java.awt.Label();
        txtVendedor = new javax.swing.JTextField();
        btnFactura = new javax.swing.JButton();
        lblPagado = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label1.setFont(new java.awt.Font("Engravers MT", 0, 48)); // NOI18N
        label1.setText("Calculadora Cacao");
        jPanel1.add(label1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 20, -1, 80));

        lblNombreCliente.setText("Nombre del Cliente");
        jPanel1.add(lblNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 170, -1, -1));

        lblTipoCacao.setText("Tipo ");
        jPanel1.add(lblTipoCacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 200, -1, -1));

        lblCantidadCacao.setText("Cantidad");
        jPanel1.add(lblCantidadCacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 230, -1, -1));

        lblPrecioCacao.setText("Precio");
        jPanel1.add(lblPrecioCacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 270, -1, -1));

        lblTotalAPagar.setText("Total a Pagar");
        jPanel1.add(lblTotalAPagar, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 332, -1, 60));
        jPanel1.add(txtNombreCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, 140, -1));
        jPanel1.add(txtTipoCacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 200, 177, -1));
        jPanel1.add(txtCantidadCacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, 177, -1));
        jPanel1.add(txtPrecioCacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 270, 177, -1));

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel1.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 462, -1, -1));

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });
        jPanel1.add(btnCalcular, new org.netbeans.lib.awtextra.AbsoluteConstraints(266, 462, -1, -1));

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnBorrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 462, -1, -1));

        lblFecha.setText("Fecha");
        jPanel1.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 110, -1, -1));
        jPanel1.add(txtFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 177, -1));

        lblVendedor.setText("Vendedor");
        jPanel1.add(lblVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 140, -1, -1));
        jPanel1.add(txtVendedor, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 140, 177, -1));

        btnFactura.setText("Facturar");
        btnFactura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturaActionPerformed(evt);
            }
        });
        jPanel1.add(btnFactura, new org.netbeans.lib.awtextra.AbsoluteConstraints(518, 462, -1, -1));

        lblPagado.setText("= 00");
        jPanel1.add(lblPagado, new org.netbeans.lib.awtextra.AbsoluteConstraints(264, 352, 37, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Portadas/fondosCalculadoraCacao.png"))); // NOI18N
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 1130, 510));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
//        if (txtNombreCliente.getText().isEmpty() || txtTipoCacao.getText().isEmpty()|| txtCantidadCacao.getText().isEmpty()|| txtPrecioCacao.getText().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Los Campos estan vacios. Por favor Llena los campos.");
//        } else if (txtNombreCliente.isEnum) {
//            
//        }else {
//            cantidadCacao = Double.parseDouble(txtCantidadCacao.getText());
//            cantidadCacaoBruto = Double.parseDouble(txtCantidadCacao.getText());
//            precioBruto = Double.parseDouble(txtPrecioCacao.getText());
//            cantidadCacao= Math.floor(cantidadCacaoBruto * porcentajeQuintal);
//            precioCacao = precioBruto / porCentajePrecio;
//            resultadoCacao= cantidadCacao* precioCacao;
////            System.out.print(cantidadCacao);
//            lblTotalAPagar.setForeground(Color.red);
//            lblTotalAPagar.setText("El Total a pagar es: " + resultadoCacao);
//        } 
//        if (txtNombreCliente.getText().isEmpty() || txtTipoCacao.getText().isEmpty() || txtCantidadCacao.getText().isEmpty() || txtPrecioCacao.getText().isEmpty()) {
//            JOptionPane.showMessageDialog(null, "Los Campos están vacíos. Por favor llena los campos.");
//        } else {
//            try {
//                cantidadCacaoBruto = Double.parseDouble(txtCantidadCacao.getText());
//                precioBruto = Double.parseDouble(txtPrecioCacao.getText());
//                if (Double.isNaN(cantidadCacaoBruto) || Double.isNaN(precioBruto)) {
//                    JOptionPane.showMessageDialog(null, "Por favor ingresa valores numéricos válidos en los campos de cantidad y precio de cacao.");
//                } else if (!Cliente.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+") || !tipoCacao.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+")) {
//                    JOptionPane.showMessageDialog(null, "Por favor ingresa solo texto en los campos de nombre de cliente y tipo de cacao.");
//                } else {
//                    cantidadCacao = Math.floor(cantidadCacaoBruto * porcentajeQuintal);
//                    precioCacao = precioBruto / porCentajePrecio;
//                    resultadoCacao = cantidadCacao * precioCacao;
//                    lblTotalAPagar.setForeground(Color.RED);
//                    lblTotalAPagar.setText("El Total a pagar es: " + resultadoCacao);
//                }
//            } catch (NumberFormatException e) {
//                JOptionPane.showMessageDialog(null, "Por favor ingresa valores numéricos válidos en los campos de cantidad y precio de cacao.");
//            }
//        }

        long resultadoRedondiado;
        if (!txtFecha.getText().isEmpty() && txtVendedor.getText().isEmpty() && txtNombreCliente.getText().isEmpty() && !txtTipoCacao.getText().isEmpty() && !txtCantidadCacao.getText().isEmpty() && !txtPrecioCacao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Los Campos están vacíos. Por favor llena los campos.");
        } else {
            try {
                cantidadCacaoBruto = Double.parseDouble(txtCantidadCacao.getText());
                precioBruto = Double.parseDouble(txtPrecioCacao.getText());

                // Verificar si los valores son números válidos
                if (Double.isNaN(cantidadCacaoBruto) || Double.isNaN(precioBruto)) {
                    JOptionPane.showMessageDialog(null, "Por favor ingresa valores numéricos válidos en los campos de cantidad y precio de cacao.");
                } else {
                    try {
                        Cliente = txtNombreCliente.getText();
                        tipoCacao = txtTipoCacao.getText();

                        // Verificar si los valores son texto válido
                        if (!Cliente.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+") || !tipoCacao.matches("[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+")) {
                            throw new IllegalArgumentException("Por favor ingresa solo texto en los campos de nombre de cliente y tipo de cacao.");
                        } else {
                            cantidadCacao = Math.floor(cantidadCacaoBruto * porcentajeQuintal);
                            precioCacao = precioBruto / porCentajePrecio;
                            resultadoCacao = cantidadCacao * precioCacao;
                            resultadoRedondiado = Math.round(resultadoCacao);
                            lblTotalAPagar.setForeground(Color.RED);
                            lblPagado.setText(String.valueOf(resultadoRedondiado));
                        }
                    } catch (IllegalArgumentException e) {
                        JOptionPane.showMessageDialog(null, e.getMessage());
                    }
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Por favor ingresa valores numéricos válidos en los campos de cantidad y precio de cacao.");
            }
        }


    }//GEN-LAST:event_btnCalcularActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        boolean camposVaciados = false;
        if (!txtFecha.getText().isEmpty() && txtVendedor.getText().isEmpty() && txtNombreCliente.getText().isEmpty() && !txtTipoCacao.getText().isEmpty() && !txtCantidadCacao.getText().isEmpty() && !txtPrecioCacao.getText().isEmpty()) {
            txtFecha.setText(" ");
            txtVendedor.setText(" ");
            txtNombreCliente.setText(" ");
            txtTipoCacao.setText(" ");
            txtCantidadCacao.setText(" ");
            txtPrecioCacao.setText(" ");
            lblPagado.setText(" ");
            camposVaciados = true;
            JOptionPane.showMessageDialog(null, "Se borraron los Campos Exitosamente.");
        } else if (txtFecha.getText().isEmpty() && txtVendedor.getText().isEmpty() && txtNombreCliente.getText().isEmpty() && txtTipoCacao.getText().isEmpty() && txtCantidadCacao.getText().isEmpty() && txtPrecioCacao.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No se Pudieron borrar los Campos porque estan vacio. Cuando esten llenos Podrar dar Clic al Boton Borrar");
        } else {
            JOptionPane.showMessageDialog(null, "No se Pudieron borrar los Campos porque ya lo hizo. Debe llenar los campos antes de borrarlos.");
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
//        Cliente= String.valueOf(txtNombreCliente.getText());
//        tipoCacao= String.valueOf(txtNombreCliente.getText());
//        cantidadCacao= Double.valueOf(txtCantidadCacao.getText());
//        tabla.addRow(new Object[]{ Cliente, tipoCacao, cantidadCacao});
//        try {
//            Cliente = txtNombreCliente.getText();
//            tipoCacao = txtTipoCacao.getText(); // Assumes you have a text field named txtTipoCacao
//            cantidadCacao = Double.parseDouble(txtCantidadCacao.getText());
//
//            tabla.addRow(new Object[]{Cliente, tipoCacao, cantidadCacao});
//        } catch (NumberFormatException e) {
//            javax.swing.JOptionPane.showMessageDialog(this, "La cantidad de cacao debe ser un número.", "Error de Formato", javax.swing.JOptionPane.ERROR_MESSAGE);
//        } catch (Exception e) {
//            javax.swing.JOptionPane.showMessageDialog(this, "Ocurrió un error al guardar los datos.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//        }
//        try {
//            FileWriter archivofacrura = new FileWriter("src/Base de Datos txt/Almacen Cliente.txt");
//            BufferedWriter escribe = new BufferedWriter(archivofacrura);
//            escribe.write(txtFecha.getText());
//            escribe.write(txtVendedor.getText());
//            escribe.write(txtNombreCliente.getText());
//            escribe.write(txtTipoCacao.getText());
//            escribe.write(txtCantidadCacao.getText());
//            escribe.write(txtPrecioCacao.getText());
//            escribe.write(lblTotalAPagar.getText());
//            escribe.close();
//        } catch (Exception ex) {
//             ex.printStackTrace();
//        }

try {
    FileWriter archivofacrura = new FileWriter("src/Base de Datos txt/Almacen Cliente.txt",true);
    BufferedWriter escribe = new BufferedWriter(archivofacrura);

    // Obtenemos los textos de cada campo y los combinamos en una sola línea con comas
    String linea = String.join(",",
        txtFecha.getText(),
        txtVendedor.getText(),
        txtNombreCliente.getText(),
        txtTipoCacao.getText(),
        txtCantidadCacao.getText(),
        txtPrecioCacao.getText(),
        lblPagado.getText()
    );

    // Escribimos la línea en el archivo
    escribe.write(linea);
    escribe.newLine(); // Añade una nueva línea después de cada registro

    escribe.close();
} catch (Exception ex) {
    ex.printStackTrace();
}
    }//GEN-LAST:event_btnGuardarActionPerformed
//private void imprimirFactura() {
//    String recolectar = String.join(",",
//        "Fecha: " + txtFecha.getText(),
//        "Vendedor: " + txtVendedor.getText(),
//        "Cliente: " + txtNombreCliente.getText(),
//        "Tipo de Cacao: " + txtTipoCacao.getText(),
//        "Cantidad de Cacao: " + txtCantidadCacao.getText(),
//        "Precio de Cacao: " + txtPrecioCacao.getText(),
//        "Total a Pagar: " + lblTotalAPagar.getText()
//    );
//
//    PrinterJob job = PrinterJob.getPrinterJob();
//    job.setPrintable(new Printable() {
//        @Override
//        public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
//            if (page > 0) {
//                return NO_SUCH_PAGE;
//            }
//
//            Graphics2D g2d = (Graphics2D) g;
//            g2d.translate(pf.getImageableX(), pf.getImageableY());
//
//            // Dibujar el texto en la página
//            g2d.drawString(recolectar, 100, 100);
//
//            return PAGE_EXISTS;
//        }
//    });
//
//    // Mostrar el diálogo de impresión
//    boolean doPrint = job.printDialog();
//    if (doPrint) {
//        try {
//            job.print();
//        } catch (PrinterException ex) {
//            // Manejar error de impresión
//            ex.printStackTrace();
//        }
//    }
//}
    
//    private void imprimirFactura() {
//    String fecha = "Fecha: " + txtFecha.getText();
//    String vendedor = "Vendedor: " + txtVendedor.getText();
//    String cliente = "Cliente: " + txtNombreCliente.getText();
//    String tipoCacao = "Tipo de Cacao: " + txtTipoCacao.getText();
//    String cantidadCacao = "Cantidad de Cacao: " + txtCantidadCacao.getText();
//    String precioCacao = "Precio de Cacao: " + txtPrecioCacao.getText();
//    String totalPagar = "Total a Pagar: " + lblTotalAPagar.getText();
//
//    PrinterJob job = PrinterJob.getPrinterJob();
//    job.setPrintable(new Printable() {
//        @Override
//        public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
//            if (page > 0) {
//                return NO_SUCH_PAGE;
//            }
//
//            Graphics2D g2d = (Graphics2D) g;
//            g2d.translate(pf.getImageableX(), pf.getImageableY());
//
//            // Fuente para el texto
//            Font fuenteNormal = new Font("Serif", Font.PLAIN, 12);
//            g2d.setFont(fuenteNormal);
//
//            // Dibujar cabecera
//            g2d.drawString("FACTURA", 100, 50);
//
//            // Dibujar la información
//            g2d.drawString(fecha, 100, 100);
//            g2d.drawString(vendedor, 100, 120);
//            g2d.drawString(cliente, 100, 140);
//
//            // Dibujar la tabla
//            int yTablaInicio = 180;
//            int y = yTablaInicio;
//
//            // Dibujar encabezados de la tabla
//            g2d.drawString("Descripción", 100, y);
//            g2d.drawString("Cantidad", 300, y);
//            g2d.drawString("Precio", 400, y);
//
//            y += 20; // Avanzar la posición vertical
//
//            // Dibujar los datos de la tabla
//            g2d.drawString(tipoCacao, 100, y);
//            g2d.drawString(cantidadCacao, 300, y);
//            g2d.drawString(precioCacao, 400, y);
//
//            y += 40; // Avanzar la posición vertical para el total
//
//            // Dibujar el total
//            g2d.drawString(totalPagar, 100, y);
//
//            // Dibujar bordes de la tabla
//            g2d.drawRect(90, yTablaInicio - 20, 350, 80); // Rectángulo grande alrededor de la tabla
//            g2d.drawLine(290, yTablaInicio - 20, 290, yTablaInicio + 60); // Línea vertical entre Descripción y Cantidad
//            g2d.drawLine(390, yTablaInicio - 20, 390, yTablaInicio + 60); // Línea vertical entre Cantidad y Precio
//            g2d.drawLine(90, yTablaInicio, 440, yTablaInicio); // Línea horizontal bajo los encabezados
//
//            return PAGE_EXISTS;
//        }
//    });
//
//    // Mostrar el diálogo de impresión
//    boolean doPrint = job.printDialog();
//    if (doPrint) {
//        try {
//            job.print();
//        } catch (PrinterException ex) {
//            // Manejar error de impresión
//            ex.printStackTrace();
//        }
//    }
//}
    private void imprimirFactura() {
    // Recopilar los datos para imprimir
    String[] datos = {
        "Fecha: " + txtFecha.getText(),
        "Vendedor: " + txtVendedor.getText(),
        "Cliente: " + txtNombreCliente.getText(),
        "Tipo de Cacao: " + txtTipoCacao.getText(),
        "Cantidad de Cacao: " + txtCantidadCacao.getText(),
        "Precio de Cacao: " + txtPrecioCacao.getText(),
        "Total a Pagar: " + lblPagado.getText()
    };

    PrinterJob job = PrinterJob.getPrinterJob();
    job.setPrintable(new Printable() {
        @Override
        public int print(Graphics g, PageFormat pf, int page) throws PrinterException {
            if (page > 0) {
                return NO_SUCH_PAGE;
            }

            Graphics2D g2d = (Graphics2D) g;
            g2d.translate(pf.getImageableX(), pf.getImageableY());

            // Fuente para el texto
            Font fuenteNormal = new Font("Serif", Font.PLAIN, 16);
            g2d.setFont(fuenteNormal);

            // Coordenadas iniciales
            int x = 100;
            int y = 100;
            int lineSpacing = 20;

            // Dibujar título
            g2d.setFont(new Font("Serif", Font.BOLD, 28));
            g2d.drawString("FACTURA", x, y);
            y += lineSpacing * 2; // Espacio después del título

            // Dibujar la información
            g2d.setFont(fuenteNormal);
            for (String dato : datos) {
                g2d.drawString(dato, x, y);
                y += lineSpacing; // Espacio entre líneas de información
            }

            return PAGE_EXISTS;
        }
    });

    // Mostrar el diálogo de impresión
    boolean doPrint = job.printDialog();
    if (doPrint) {
        try {
            job.print();
        } catch (PrinterException ex) {
            // Manejar error de impresión
            ex.printStackTrace();
        }
    }
}



    private void btnFacturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturaActionPerformed
        imprimirFactura();
    }//GEN-LAST:event_btnFacturaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculadoraDeCacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculadoraDeCacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculadoraDeCacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculadoraDeCacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                Inventario inventario = new Inventario();
//                new CalculadoraDeCacao(inventario.getTabla()).setVisible(true);
                new CalculadoraDeCacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnFactura;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label label1;
    private java.awt.Label lblCantidadCacao;
    private java.awt.Label lblFecha;
    private java.awt.Label lblNombreCliente;
    private javax.swing.JLabel lblPagado;
    private java.awt.Label lblPrecioCacao;
    private java.awt.Label lblTipoCacao;
    private java.awt.Label lblTotalAPagar;
    private java.awt.Label lblVendedor;
    private javax.swing.JTextField txtCantidadCacao;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtPrecioCacao;
    private javax.swing.JTextField txtTipoCacao;
    private javax.swing.JTextField txtVendedor;
    // End of variables declaration//GEN-END:variables
}
